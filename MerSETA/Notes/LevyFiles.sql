/* 
 SET GLOBAL max_allowed_packet=1073741824;



update users set password = '9L9biPEyaj+S/cU/l/slswFDOGoRu9AbbdhdwYimPuMt3j2Cuy7CKmVVsyhWfxDr' where id > 1;

user merseta;
SET GLOBAL max_allowed_packet=1073741824;
update users set email = (select replace(concat(concat(first_name, '.'), concat(last_name, '@a.com')), ' ', '')) we id > '1'her;
update users set password = '43dNOuLRKwTiw3QtnIgCwF/t1/oZduo0Orb0UJaMQClLIBUlh7neqfV98kuXk61S' where id > 1;  Merseta01! ;
update banking_details set bank_acc_number = (SELECT  FLOOR(RAND() * (99999999999 - 10000000000 )) + 10000000000  as bank_acc_number);
update users set email = 'musa.mtshali2@a.com' where id = 528;
update  doc_byte set data
 
 
 
SELECT id,email FROM users WHERE email IN (SELECT email FROM users GROUP BY email HAVING COUNT(*) > 1);

 update users set email = 'musa.mtshali2@a.com' where id = 528;

select email, first_name, last_name, ifnull(email_confirm_date,'EMAIL NOT CONFIRMED') as email_confirmed, ifnull(last_login,'NEVER') as last_login
from users 
where id > 1
order by  email_confirm_date desc , last_login desc, last_name asc
  
  
  select o.rejectReasons.description, o.additionalInformation, o.user.email ,cu.company.companyName
from RejectReasonsChild o
left join  CompanyUsers cu
on cu.user.id = o.user.id
left join Tasks t
on o.user.id = t.


select o.sdfType.description, coalesce(o.sdf.active,false), count(*) 
from SDFCompany o
group by o.sdfType.description, coalesce(o.sdf.active,false)



select coalesce(o.user.active,false), count(o)
from CompanyUsers o
where o.user.id not in (select x.sdf.id from SDFCompany x)
group by coalesce(o.user.active,false)

  */

select  sum(a.mandatory_levy) , sum(a.discretionary_levy) , sum(a.admin_levy), sum(a.interest) , sum(a.penalty), sum(a.total)
from sars_levy_detail a , sars_employer_detail b
where a.sars_filel_id = 182
and a.sars_filel_id = b.sars_filel_id
and a.ref_no = b.ref_no



select b.`trading_name` , d.`description`

from sars_employer_detail b , sic_code c, chamber d
where b.sic_code_2 = c.code 
and c.chamber_id = d.id
and b.sars_filel_id = 182


select d.description, sum(a.mandatory_levy) as mandatory_levy , sum(a.discretionary_levy) as discretionary_levy , sum(a.admin_levy) as admin_levy, sum(a.interest) as interest , sum(a.penalty) as penalty , sum(a.total) as total
from sars_levy_detail a , sars_employer_detail b,  sic_code c, chamber d
where a.sars_filel_id = 182
and a.sars_filel_id = b.sars_filel_id
and a.ref_no = b.ref_no
and b.sic_code_2 = c.code 
and c.chamber_id = d.id
group by d.description

/* */
drop TEMPORARY TABLE IF EXISTS temp1;
CREATE TEMPORARY TABLE temp1 ENGINE=MEMORY 
as
select ref_no, avg( (mandatory_levy + discretionary_levy + admin_levy   ) ) as lavg
from sars_levy_detail
where arrival_date_1 >= '2016-10-01'
group by ref_no;

/* L000725020	-562.655 */

select * from temp1;

select a.ref_no, (a.mandatory_levy + a.discretionary_levy + a.admin_levy) , b.lavg
from sars_levy_detail a , temp1 b
where a.arrival_date_1 >= '2017-10-01'
and a.ref_no = b.ref_no
and  a.ref_no = 'L000725020'


select a.ref_no, sum( (a.mandatory_levy + a.discretionary_levy + a.admin_levy) ), tmp.lavg
from sars_levy_detail a , (
    select b.ref_no, avg( (b.mandatory_levy + b.discretionary_levy + b.admin_levy   ) ) as lavg
	from sars_levy_detail b
	where b.arrival_date_1 >= '2016-10-01'
	group by b.ref_no
) as tmp
where a.arrival_date_1 >= '2017-10-01'
and  a.ref_no = tmp.ref_no
group by a.ref_no

and  a.ref_no = 'L000725020'



select a.ref_no, sum(a.total-(a.interest + a.penalty) ) , tmp.lavg 
from sars_levy_detail a , (
    select b.ref_no, avg(b.total - (b.interest + b.penalty) ) as lavg
	from sars_levy_detail b
	where b.arrival_date_1 >= '2016-10-01'
	group by b.ref_no
) as tmp
where a.arrival_date_1 >= '2017-10-01'
and  a.ref_no = tmp.ref_no
group by a.ref_no


select a.ref_no, sum(a.total-(a.interest + a.penalty) ) , tmp.lavg , 
case when (sum(a.total-(a.interest + a.penalty))*-1.0) > (tmp.lavg*-1.0) 
     then ((sum(a.total-(a.interest + a.penalty))*-1.0) -(tmp.lavg*-1.0) )
     else  ((tmp.lavg*-1.0)-  (sum(a.total-(a.interest + a.penalty))*-1.0)  ) end as dev_amt,

case when (sum(a.total-(a.interest + a.penalty))*-1.0) > (tmp.lavg*-1.0) 
        then ((((sum(a.total-(a.interest + a.penalty))*-1.0) - (tmp.lavg*-1.0) ) / (tmp.lavg*-1.0)) * 100)
		else ((((tmp.lavg*-1.0) - (sum(a.total-(a.interest + a.penalty))*-1.0)   ) /(sum(a.total-(a.interest + a.penalty))*-1.0) ) * 100) 
		end as devPerc , tmp.cnt
from sars_levy_detail a , (
    select b.ref_no, avg(b.total - (b.interest + b.penalty) ) as lavg ,  count(distinct arrival_date_1) as cnt
	from sars_levy_detail b
	where b.arrival_date_1 >= '2016-09-01' and b.arrival_date_1 < '2017-10-01'
	group by b.ref_no
	having cnt > 11
) as tmp
where a.arrival_date_1 >= '2017-10-01'
and  a.ref_no = tmp.ref_no
group by a.ref_no
order by devPerc desc 




select a.ref_no as sdlnumber, 
      ROUND(sum(a.total-(a.interest + a.penalty) ),2) as latest_levy, 
      ROUND(tmp.lavg,2) as average_levy , 
case when (sum(a.total-(a.interest + a.penalty))*-1.0) > (tmp.lavg*-1.0) 
     then ROUND(  ((sum(a.total-(a.interest + a.penalty))*-1.0) -(tmp.lavg*-1.0) ),2)
     else ROUND( ((tmp.lavg*-1.0)-  (sum(a.total-(a.interest + a.penalty))*-1.0)  ) ,2)
     end as deviation_amount,

case when (sum(a.total-(a.interest + a.penalty))*-1.0) > (tmp.lavg*-1.0) 
        then ROUND(  ((((sum(a.total-(a.interest + a.penalty))*-1.0) - (tmp.lavg*-1.0) ) / (tmp.lavg*-1.0)) * 100),2)
		else ROUND( ((((tmp.lavg*-1.0) - (sum(a.total-(a.interest + a.penalty))*-1.0)   ) /(sum(a.total-(a.interest + a.penalty))*-1.0) ) * 100) ,2)
		end as deviation_percentage , tmp.cnt as no_levies
from sars_levy_detail a , (
    select b.ref_no, avg(b.total - (b.interest + b.penalty) ) as lavg ,  count(distinct arrival_date_1) as cnt
	from sars_levy_detail b
	where b.arrival_date_1 >= DATE_SUB( (select max(arrival_date_1) from sars_levy_detail),INTERVAL 1 YEAR)  and b.arrival_date_1 < (select max(arrival_date_1) from sars_levy_detail)
	group by b.ref_no	
) as tmp
where a.arrival_date_1 >= (select max(arrival_date_1) from sars_levy_detail)
and  a.ref_no = tmp.ref_no
group by a.ref_no
order by deviation_percentage desc 




-- group by chamber --
select f.`description`, (sum(a.mandatory_levy)*-1)
from sars_levy_detail a ,sars_employer_detail b, sic_code c, chamber f
where c.code = b.sic_code_2
and a.sars_filel_id = b.sars_filel_id
and a.ref_no = b.ref_no
and b.sars_filel_id = 182
and c.chamber_id = f.id
group by f.`description`
--


--RECON SQL START--
select sum(mandatory_levy) from sars_levy_detail
where ref_no = 'L910704628'
and scheme_year = 2013
and arrival_date_1 <= '2017-02-01'

select sum(document_amount_d) from t_s2
where scheme_year = 2014
and vendor_id = 'L910704628'



select arrival_date_1, mandatory_levy from sars_levy_detail
where ref_no = 'L910704628'
and scheme_year = 2013
and arrival_date_1 <= '2017-02-01'


select vendor_id,	vendor_name,	voucher_number,	document_type,	account_code, document_date_d,	posted_date_d,	document_amount_d,	scheme_year	
from t_s2
where scheme_year = 2014
and vendor_id = 'L910704628'	
order by document_date_d		


select * from t_s1 
where scheme_year = '2014'
and status_description in ('Paid','Approved')
and levy_number not in (select vendor_id from t_s2 where scheme_year = 2014)


select * from t_s2 
where scheme_year = 2014
and vendor_id not in (select levy_number from t_s1 
					where scheme_year = '2014'
					and status_description in ('Paid'))

select  sum(a.document_amount_d) from t_s2 a
where a.scheme_year = 2016
and a.vendor_id not in (select b.levy_number from t_s1 b
					where b.scheme_year  = 2016
					and b.status_description in ('Paid'))

select distinct(status_description) from t_s1 


--summaray per scheme year



select sum(mandatory_levy) from sars_levy_detail
where ref_no in (select b.levy_number from t_s1 b
					where b.scheme_year  = 2014
					and b.status_description in ('Paid'))
and scheme_year = 2013. //-192678398.4999979


select  sum(a.document_amount_d) from t_s2 a
where a.scheme_year = 2014
and a.vendor_id  in (select b.levy_number from t_s1 b
					where b.scheme_year  = 2014
					and b.status_description in ('Paid')) //192965263.98000124

--RECON SQL END--







select `arrival_date_1` , count(*) from sars_levy_detail 
where scheme_year is null 
group by arrival_date_1


select arrival_date_1 , sum(mandatory_levy) from sars_levy_detail 
where arrival_date_1 
 between '2015-04-01' and '2016-03-30'
group by arrival_date_1


select  sum(mandatory_levy) from sars_levy_detail 
where arrival_date_1 
 between '2015-04-01' and '2016-03-31'
 
 
select  sum(mandatory_levy), sum(discretionary_levy) from sars_levy_detail 
where sars_filel_id = 152

where arrival_date_1 = '2016-08-01' 
group by arrival_date_1
 
 
select  count(distinct ref_no)  from sars_levy_detail 
where scheme_year = 2016

select count(distinct ref_no) from sars_employer_detail
where sars_filel_id in (select  distinct sars_filel_id  from sars_levy_detail 
				where scheme_year = 2016)
and trading_status = 'A'

alter table sars_employer_detail add index hs_l_inx01 (sars_filel_id,trading_status)


select  count(distinct vendor_id )from t_s2 
where scheme_year = 2016

 
where arrival_date_1 
 between '2015-04-01' and '2016-03-31'
 and mandatory_levy <> 0 
 

select sum(document_amount_d) from t_s2
where document_date_d 
between '2015-04-01' and '2016-03-31'


select distinct document_date_d from t_s2
where scheme_year = 2016
order by document_date_d


where document_date_d 
between '2015-04-01' and '2016-03-31'





select distinct count(a.ref_no from sars_employer_detail a, sars_files b
where a.sars_filel_id = b.id
and for_month between '2015-04-01' and '2016-03-31'

select   sum(mandatory_levy) from sars_levy_detail 

where arrival_date_1 <= '2016-03-30'


select  scheme_year , sum(mandatory_levy) from sars_levy_detail 
where scheme_year = 2016
and arrival_date_1 <= '2016-03-30'

select  scheme_year, sum(mandatory_levy) from sars_levy_detail 
where scheme_year = 2016
and arrival_date_1 > '2017-03-30'

select  distinct (arrival_date_1 )from sars_levy_detail 
where scheme_year = 2016
order by arrival_date_1



2016 == 2015/04/1  => 2016/03/31

SARS scheme year 2017 : 2017-03-01 => 2018-02-28      2014 : 2013-04-01 => 2014-03-31
SARS scheme year 2016 : 2016-03-01 => 2017-02-28
SARS scheme year 2015 : 2015-03-01 => 2016-02-28
SARS scheme year 2014 : 2014-03-01 => 2015-02-28


explain select
  count(distinct ref_no) 
 from
  sars_employer_detail 
 
 where
  (
   sars_filel_id in (
    select
     distinct sars_filel_id 
    from
     sars_levy_detail 
    where
     scheme_year=2016
   )
  ) 
   and trading_status = 'A'
   
   select  sars_filel_id, trading_status , count(*) from sars_employer_detail group by sars_filel_id,trading_status





ALTER TABLE sars_employer_detail
PARTITION BY LIST COLUMNS (trading_status)
  (
    PARTITION p01 VALUES IN ('0'),
    PARTITION p02 VALUES IN ('A'),
    PARTITION p03 VALUES IN ('B'),
    PARTITION p04 VALUES IN ('D'),
    PARTITION p05 VALUES IN ('R'),
    PARTITION p06 VALUES IN ('S'),
    PARTITION p07 VALUES IN ('X'),
    PARTITION p08 VALUES IN ('Y')
  );
  
  
 select * , (mandatory_levy+interest+discretionary_levy+penalty+admin_levy ) as tot
from sars_levy_detail
where ( if (penalty < 0, penalty * -1, penalty) >
       if (total < 0, total * -1, total) )
and    arrival_date_1 <= '2013-03-01'    limit 5000

           
                       
                       
select * , ROUND( (mandatory_levy+interest+discretionary_levy+penalty+admin_levy ),2) as tot
from sars_levy_detail
where (total = 0 or total = 1)
and    arrival_date_1 < '2013-03-01' 
 limit 5000
  
  
  
 SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_NAME = 'sars_employer_detail'; 
 ALTER TABLE sars_levy_detail DROP FOREIGN KEY FK739p8awpfxc152nvk579n9b9b;
 
 alter table sars_employer_detail drop index index_hs_1
SHOW INDEX FROM sars_employer_detail


drop table sars_levy_detail;
drop table sars_employer_detail;
drop table sars_files;

CREATE TABLE `sars_files` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `for_month` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;


CREATE TABLE `sars_employer_detail` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `company_registration_number` varchar(100) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `ref_no` varchar(50) DEFAULT NULL,
  `registered_name_of_entity` varchar(500) DEFAULT NULL,
  `sic_code_2` varchar(50) DEFAULT NULL,
  `trading_name` varchar(255) DEFAULT NULL,
  `trading_status` varchar(10) DEFAULT NULL,
  `sars_filel_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `hs_index_name` (`ref_no`,`sars_filel_id`),
  KEY `hs_l_inx01` (`sars_filel_id`,`trading_status`),
  CONSTRAINT `FK90kbr37mp7qs148a5lvo5syps` FOREIGN KEY (`sars_filel_id`) REFERENCES `sars_files` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50444 DEFAULT CHARSET=latin1;



CREATE TABLE `sars_levy_detail` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `admin_levy` double DEFAULT NULL,
  `arrival_date_1` datetime DEFAULT NULL,
  `arrival_date_2` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `mandatory_levy` double DEFAULT NULL,
  `interest` double DEFAULT NULL,
  `discretionary_levy` double DEFAULT NULL,
  `penalty` double DEFAULT NULL,
  `ref_no` varchar(50) DEFAULT NULL,
  `scheme_year` int(11) DEFAULT NULL,
  `seta_code` varchar(50) DEFAULT NULL,
  `total` double DEFAULT NULL,
  `sars_employer_detail_id` bigint(20) DEFAULT NULL,
  `sars_filel_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK739p8awpfxc152nvk579n9b9b` (`sars_employer_detail_id`),
  KEY `arrival_date_1` (`arrival_date_1`),
  KEY `hs_index_01` (`ref_no`,`arrival_date_1`),
  KEY `index_hs_2` (`sars_filel_id`),
  KEY `scheme_year` (`scheme_year`),
  CONSTRAINT `FK739p8awpfxc152nvk579n9b9b` FOREIGN KEY (`sars_employer_detail_id`) REFERENCES `sars_employer_detail` (`id`),
  CONSTRAINT `FKdxorjdcrkbtjoqty88wmldray` FOREIGN KEY (`sars_filel_id`) REFERENCES `sars_files` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15402 DEFAULT CHARSET=latin1;
 