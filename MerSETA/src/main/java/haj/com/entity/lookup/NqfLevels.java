package haj.com.entity.lookup;
// Generated Dec 3, 2015 6:13:03 AM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import haj.com.framework.AbstractLookup;

// TODO: Auto-generated Javadoc
/**
 * NqfLevels generated by hbm2java.
 */
@Entity
@Table(name = "nqf_levels")
@AuditTable(value = "nqf_levels_hist")
@Audited
public class NqfLevels extends AbstractLookup {

	/** The id. */
	private Long id;

	/** The level. */
	private Integer level;

	/** The description. */
	private String description;
	
	/** The code. */
	private String code;
	
	/** The code. */
	private String unitStandardCode;

	/** The create date. */
	private Date createDate;

	/** The intervention level. */
	private InterventionLevel interventionLevel;

	private HighestQualificationRequired highestQualificationRequired;

	private String pre2009Description;
	
	private String saqaQualificationDescription;

	/**
	 * Instantiates a new nqf levels.
	 */
	public NqfLevels() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * Instantiates a new nqf levels.
	 *
	 * @param level
	 *            the level
	 * @param description
	 *            the description
	 */
	public NqfLevels(Integer level, String description) {
		this.level = level;
		this.description = description;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 *
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the level.
	 *
	 * @return the level
	 */
	@Column(name = "level")
	public Integer getLevel() {
		return this.level;
	}

	/**
	 * Sets the level.
	 *
	 * @param level
	 *            the new level
	 */
	public void setLevel(Integer level) {
		this.level = level;
	}

	/**
	 * Gets the description.
	 *
	 * @return the description
	 */
	@Column(name = "description", length = 100)
	public String getDescription() {
		return this.description;
	}

	/**
	 * Sets the description.
	 *
	 * @param description
	 *            the new description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		NqfLevels other = (NqfLevels) obj;
		if (id == null) {
			if (other.id != null) return false;
		} else if (!id.equals(other.id)) return false;
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see haj.com.framework.AbstractLookup#getCreateDate()
	 */
	@Override
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", length = 19)
	public Date getCreateDate() {
		return createDate;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see haj.com.framework.AbstractLookup#setCreateDate(java.util.Date)
	 */
	@Override
	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	/**
	 * Gets the intervention level.
	 *
	 * @return the intervention level
	 */
	// Intervention Level
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "intervention_level_id", nullable = true)
	@Fetch(FetchMode.JOIN)
	public InterventionLevel getInterventionLevel() {
		return interventionLevel;
	}

	/**
	 * Sets the intervention level.
	 *
	 * @param interventionLevel
	 *            the new intervention level
	 */
	public void setInterventionLevel(InterventionLevel interventionLevel) {
		this.interventionLevel = interventionLevel;
	}

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "highest_qualification_required_id", nullable = true)
	@Fetch(FetchMode.JOIN)
	public HighestQualificationRequired getHighestQualificationRequired() {
		return highestQualificationRequired;
	}

	public void setHighestQualificationRequired(HighestQualificationRequired highestQualificationRequired) {
		this.highestQualificationRequired = highestQualificationRequired;
	}

	@Column(name = "pre_2009_description", length = 100)
	public String getPre2009Description() {
		return pre2009Description;
	}

	public void setPre2009Description(String pre2009Description) {
		this.pre2009Description = pre2009Description;
	}

	@Column(name = "saqa_qualification_description", length = 100)
	public String getSaqaQualificationDescription() {
		return saqaQualificationDescription;
	}

	public void setSaqaQualificationDescription(String saqaQualificationDescription) {
		this.saqaQualificationDescription = saqaQualificationDescription;
	}

	@Column(name = "code")
	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "unit_standard_code")
	public String getUnitStandardCode() {
		return unitStandardCode;
	}

	public void setUnitStandardCode(String unitStandardCode) {
		this.unitStandardCode = unitStandardCode;
	}

}