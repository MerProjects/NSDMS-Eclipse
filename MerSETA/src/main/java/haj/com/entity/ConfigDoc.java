package haj.com.entity;
// Generated May 27, 2015 8:01:25 AM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import haj.com.entity.enums.ArplDocRequirements;
import haj.com.entity.enums.CompanyUserTypeEnum;
import haj.com.entity.enums.ConfigDocProcessEnum;
import haj.com.entity.enums.LearnerDocRequirements;
import haj.com.entity.enums.SdfRegistartionDocEnum;
import haj.com.entity.enums.TransferDocumentsEnum;
import haj.com.entity.enums.WpaDocRequirements;
import haj.com.entity.enums.WspDocRequirements;
import haj.com.framework.IDataEntity;

// TODO: Auto-generated Javadoc
/**
 * ConfigDoc generated by hbm2java.
 */
@Entity
@Table(name = "config_doc")
public class ConfigDoc implements IDataEntity {

	/** The id. */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Long id;

	/** The name. */
	@Column(name = "name", length = 300)
	private String name;

	/** The config doc process. */
	@Enumerated
	@Column(name = "config_doc_process")
	private ConfigDocProcessEnum configDocProcess;

	/** The create date. */
	@CreationTimestamp
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", length = 19)
	private Date createDate;

	/** The parent. */
	@ManyToOne(fetch = FetchType.LAZY)
	@Fetch(FetchMode.JOIN)
	@JoinColumn(name = "parent_config_doc_id", insertable = true, updatable = true, nullable = true)
	private ConfigDoc parent;

	/** The hosting company. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "hosting_company_id", nullable = true)
	private HostingCompany hostingCompany;

	/** The req immediate. */
	@Column(name = "req_immediate", columnDefinition = "BIT default false")
	private Boolean reqImmediate;

	/** The original required. */
	@Column(name = "original_required", columnDefinition = "BIT default false")
	private Boolean originalRequired;

	/** The required document. */
	@Column(name = "required_document", columnDefinition = "BIT default false")
	private Boolean requiredDocument;
	
	/** indicator for if the document is required for appeal */
	@Column(name = "required_for_appeal", columnDefinition = "BIT default false")
	private Boolean requiredForAppeal;

	/** The company or user document. */
	@Enumerated
	@Column(name = "company_or_user_document", nullable = true)
	private CompanyUserTypeEnum companyOrUserDocument;

	@ManyToOne(fetch = FetchType.LAZY)
	@Fetch(FetchMode.JOIN)
	@JoinColumn(name = "process_roles", insertable = true, updatable = true, nullable = true)
	private ProcessRoles processRoles;

	@Column(name = "jasper_report", length = 300)
	private String jasperReport;
	
	@Column(name = "cofig_count")
	private Integer configCount;

	@Column(name = "use_as_download", columnDefinition = "BIT default false")
	private Boolean useAsDownload;
	
	// used on SDF registration 
	@Enumerated
	@Column(name = "sdf_registartion_doc", nullable = true)
	private SdfRegistartionDocEnum sdfRegistartionDoc;
	
	// used by workplace approval 
	@Enumerated
	@Column(name = "wpa_doc_requirements", nullable = true)
	private WpaDocRequirements wpaDocRequirements;
	
	// used for the grants process
	@Enumerated
	@Column(name = "wsp_doc_requirements")
	private WspDocRequirements wspDocRequirements;
	
	// used for both ARPL and trade test documents
	@Enumerated
	@Column(name = "arpl_doc_requirements")
	private ArplDocRequirements arplDocRequirements;
	
	// used for learner transfer
	@Enumerated
	@Column(name = "transfer_documents_enum", nullable = true)
	private TransferDocumentsEnum transferDocumentsEnum;
	
	// used for both ARPL and trade test documents
	@Enumerated
	@Column(name = "learner_doc_requirements")
	private LearnerDocRequirements learnerDocRequirements;

	/** The dependants. */
	@Transient
	private List<ConfigDoc> dependants;

	/**
	 * Gets the id.
	 *
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Sets the id.
	 *
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name.
	 *
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the creates the date.
	 *
	 * @return the creates the date
	 */
	public Date getCreateDate() {
		return createDate;
	}

	/**
	 * Sets the creates the date.
	 *
	 * @param createDate
	 *            the new creates the date
	 */
	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	/**
	 * Gets the config doc process.
	 *
	 * @return the config doc process
	 */
	public ConfigDocProcessEnum getConfigDocProcess() {
		return configDocProcess;
	}

	/**
	 * Sets the config doc process.
	 *
	 * @param configDocProcess
	 *            the new config doc process
	 */
	public void setConfigDocProcess(ConfigDocProcessEnum configDocProcess) {
		this.configDocProcess = configDocProcess;
	}

	/**
	 * Gets the hosting company.
	 *
	 * @return the hosting company
	 */
	public HostingCompany getHostingCompany() {
		return hostingCompany;
	}

	/**
	 * Sets the hosting company.
	 *
	 * @param hostingCompany
	 *            the new hosting company
	 */
	public void setHostingCompany(HostingCompany hostingCompany) {
		this.hostingCompany = hostingCompany;
	}

	/**
	 * Gets the dependants.
	 *
	 * @return the dependants
	 */
	public List<ConfigDoc> getDependants() {
		return dependants;
	}

	/**
	 * Sets the dependants.
	 *
	 * @param dependants
	 *            the new dependants
	 */
	public void setDependants(List<ConfigDoc> dependants) {
		this.dependants = dependants;
	}

	/**
	 * Gets the parent.
	 *
	 * @return the parent
	 */
	public ConfigDoc getParent() {
		return parent;
	}

	/**
	 * Sets the parent.
	 *
	 * @param parent
	 *            the new parent
	 */
	public void setParent(ConfigDoc parent) {
		this.parent = parent;
	}

	/**
	 * Gets the req immediate.
	 *
	 * @return the req immediate
	 */
	public Boolean getReqImmediate() {
		return reqImmediate;
	}

	/**
	 * Sets the req immediate.
	 *
	 * @param reqImmediate
	 *            the new req immediate
	 */
	public void setReqImmediate(Boolean reqImmediate) {
		this.reqImmediate = reqImmediate;
	}

	/**
	 * Gets the company or user document.
	 *
	 * @return the company or user document
	 */
	public CompanyUserTypeEnum getCompanyOrUserDocument() {
		return companyOrUserDocument;
	}

	/**
	 * Sets the company or user document.
	 *
	 * @param companyOrUserDocument
	 *            the new company or user document
	 */
	public void setCompanyOrUserDocument(CompanyUserTypeEnum companyOrUserDocument) {
		this.companyOrUserDocument = companyOrUserDocument;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		ConfigDoc other = (ConfigDoc) obj;
		if (id == null) {
			if (other.id != null) return false;
		} else if (!id.equals(other.id)) return false;
		return true;
	}

	/**
	 * Gets the original required.
	 *
	 * @return the original required
	 */
	public Boolean getOriginalRequired() {
		return originalRequired;
	}

	/**
	 * Sets the original required.
	 *
	 * @param originalRequired
	 *            the new original required
	 */
	public void setOriginalRequired(Boolean originalRequired) {
		this.originalRequired = originalRequired;
	}

	/**
	 * Gets the required document.
	 *
	 * @return the required document
	 */
	public Boolean getRequiredDocument() {
		return requiredDocument;
	}

	/**
	 * Sets the required document.
	 *
	 * @param requiredDocument
	 *            the new required document
	 */
	public void setRequiredDocument(Boolean requiredDocument) {
		this.requiredDocument = requiredDocument;
	}

	public WspDocRequirements getWspDocRequirements() {
		return wspDocRequirements;
	}

	public void setWspDocRequirements(WspDocRequirements wspDocRequirements) {
		this.wspDocRequirements = wspDocRequirements;
	}

	public ProcessRoles getProcessRoles() {
		return processRoles;
	}

	public void setProcessRoles(ProcessRoles processRoles) {
		this.processRoles = processRoles;
	}

	public String getJasperReport() {
		return jasperReport;
	}

	public void setJasperReport(String jasperReport) {
		this.jasperReport = jasperReport;
	}

	public Boolean getUseAsDownload() {
		return useAsDownload;
	}

	public void setUseAsDownload(Boolean useAsDownload) {
		this.useAsDownload = useAsDownload;
	}

	public Boolean getRequiredForAppeal() {
		return requiredForAppeal;
	}

	public void setRequiredForAppeal(Boolean requiredForAppeal) {
		this.requiredForAppeal = requiredForAppeal;
	}

	public WpaDocRequirements getWpaDocRequirements() {
		return wpaDocRequirements;
	}

	public void setWpaDocRequirements(WpaDocRequirements wpaDocRequirements) {
		this.wpaDocRequirements = wpaDocRequirements;
	}

	public Integer getConfigCount() {
		return configCount;
	}

	public void setConfigCount(Integer configCount) {
		this.configCount = configCount;
	}

	public ArplDocRequirements getArplDocRequirements() {
		return arplDocRequirements;
	}

	public void setArplDocRequirements(ArplDocRequirements arplDocRequirements) {
		this.arplDocRequirements = arplDocRequirements;
	}

	public TransferDocumentsEnum getTransferDocumentsEnum() {
		return transferDocumentsEnum;
	}

	public void setTransferDocumentsEnum(TransferDocumentsEnum transferDocumentsEnum) {
		this.transferDocumentsEnum = transferDocumentsEnum;
	}

	public SdfRegistartionDocEnum getSdfRegistartionDoc() {
		return sdfRegistartionDoc;
	}

	public void setSdfRegistartionDoc(SdfRegistartionDocEnum sdfRegistartionDoc) {
		this.sdfRegistartionDoc = sdfRegistartionDoc;
	}

	public LearnerDocRequirements getLearnerDocRequirements() {
		return learnerDocRequirements;
	}

	public void setLearnerDocRequirements(LearnerDocRequirements learnerDocRequirements) {
		this.learnerDocRequirements = learnerDocRequirements;
	}

}
